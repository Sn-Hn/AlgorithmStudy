// 20926: 얼음 미로
// 풀이: https://moonsbeen.tistory.com/319

import java.util.*;
 
public class Main {
 
    static char[][] board;
    static int[][] dist;
    static int w, h;
    static int[] dx = {0, 1, 0, -1};
    static int[] dy = {-1, 0, 1, 0};
 
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
 
        //입력
        w = scan.nextInt();
        h = scan.nextInt();
        scan.nextLine();
 
        board = new char[h][w];
        int start_x = -1, start_y = -1;
        int end_x = -1, end_y = -1;
        for(int i = 0; i < h; i++) {
            String str = scan.nextLine();
            for(int j = 0; j < w; j++) {
                board[i][j] = str.charAt(j);
                if(board[i][j] == 'T') {
                    start_x = i;
                    start_y = j;
                } else if(board[i][j] == 'E') {
                    end_x = i;
                    end_y = j;
                }
            }
        }
        //입력 끝
 
        int INF = Integer.MAX_VALUE;
        dist = new int[h][w];
        for(int i = 0; i < h; i++) {
            Arrays.fill(dist[i], INF);
        }
 
        bfs(start_x, start_y);
        if(dist[end_x][end_y] == INF) System.out.println("-1");
        else System.out.println(dist[end_x][end_y]);
    }   
 
    public static void bfs(int x, int y) {
        PriorityQueue<Node> q = new PriorityQueue<>();
        boolean[][] visited = new boolean[h][w];
        q.offer(new Node(x, y, 0));
        dist[x][y] = 0;
 
        while(!q.isEmpty()) {
            Node current = q.poll();
        
            if(visited[current.x][current.y]) continue;
            visited[current.x][current.y] = true;
 
            for(int i = 0; i < 4; i++) {
                int go_ratio = can_go(i, current.x, current.y);
                if(go_ratio < 1) continue;
 
                int sum_dist = 0;
                for(int j = 1; j <= go_ratio; j++) {
                    if(board[current.x + dx[i] * j][current.y + dy[i] * j] == 'E') continue;
                    else sum_dist += (board[current.x + dx[i] * j][current.y + dy[i] * j] - '0');
                }
                int nx = current.x + dx[i] * go_ratio;
                int ny = current.y + dy[i] * go_ratio;
 
                if(dist[nx][ny] > sum_dist + current.time) {
                    dist[nx][ny] = sum_dist + current.time;
                    q.offer(new Node(nx, ny, dist[nx][ny]));
                }
            }
        }
    }
 
    public static int can_go(int dir, int x, int y) {
        int ratio = 1;
        while(true) {
            int nx = x + dx[dir] * ratio;
            int ny = y + dy[dir] * ratio;
 
            if(nx < 0 || ny < 0 || nx >= h || ny >= w) break;
            if(board[nx][ny] == 'H') break;
            
            if(board[nx][ny] == 'R') return ratio - 1;
            if(board[nx][ny] == 'E' ) return ratio;
 
            ratio++;
        }
        return -1;
    }
 
    public static class Node implements Comparable<Node>{
        int x;
        int y;
        int time;
 
        public Node(int x, int y, int time) {
            this.x = x;
            this.y = y;
            this.time = time;
        }
 
        @Override
        public int compareTo(Node n) {
            return this.time - n.time;
        }
    }
}
